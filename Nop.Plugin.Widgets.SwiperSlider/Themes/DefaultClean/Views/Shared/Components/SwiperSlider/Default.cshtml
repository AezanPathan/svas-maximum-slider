@model List<SwiperSliderViewModel>

@using Nop.Web.Framework.Themes

@inject IThemeContext themeContext
@inject SwiperSliderSettings sliderSettings

@if (Model.Any())
{
    var themeName = await themeContext.GetWorkingThemeNameAsync();
    NopHtml.AppendCssFileParts($"~/Plugins/Nop.Plugin.Widgets.SwiperSlider/Themes/{themeName}/Content/Styles/svas_maximum.css");
    NopHtml.AppendCssFileParts("~/Plugins/Nop.Plugin.Widgets.SwiperSlider/Content/lib/swiper/swiper-bundle.css");


    NopHtml.AppendScriptParts(ResourceLocation.Footer, "~/Plugins/Nop.Plugin.Widgets.SwiperSlider/Content/lib/swiper/swiper-bundle.js");


    @if (!string.IsNullOrEmpty(sliderSettings.CustomCss))
    {
        <style type="text/css">
            @sliderSettings.CustomCss
        </style>
    }

    <div class="swiper-container svas-maximum-slider">
        <div class="swiper-wrapper">
            @foreach (var sliderItem in Model.OrderBy(p => p.DisplayOrder))
            {
                <div class="swiper-slide">
                    @if (!string.IsNullOrEmpty(sliderItem.Url))
                    {
                        @:<a href="@sliderItem.Url" title="@sliderItem.AlternateText">
                        }
                    <img src="@sliderItem.PictureUrl" alt="@sliderItem.AlternateText" />
                    @if (!string.IsNullOrEmpty(sliderItem.Url))
                    {
                    @:</a>
                }
                </div>
            }
        </div>
        @if (sliderSettings.PaginationEnabled)
        {
            <div class="swiper-pagination"></div>
        }

        @if (sliderSettings.NavigationEnabled)
        {
            <div class="swiper-button-prev"></div>
            <div class="swiper-button-next"></div>
        }

        @if (sliderSettings.ScrollBarEnabled)
        {
            <div class="swiper-scrollbar"></div>
        }
    </div>

    <script asp-location="Footer">
    var mySwiper = new Swiper('@sliderSettings.ContainerCssSelector', {
        direction: '@sliderSettings.Direction.ToString().ToLower()',
        freeMode: @sliderSettings.FreeModeEnabled.ToString().ToLower(),
        centeredSlides: @sliderSettings.CenteredSlidesEnabled.ToString().ToLower(),
        loop: @sliderSettings.Loop.ToString().ToLower(),
        @if(sliderSettings.Loop)
        {
            <text>
                loopFillGroupWithBlank: @sliderSettings.LoopFillGroupWithBlankEnabled.ToString().ToLower(),
            </text>
        }
        speed: @sliderSettings.Speed,
        @if(sliderSettings.PaginationEnabled)
        {
            <text>
            // If we need pagination
            pagination: {
                el: '@sliderSettings.PaginationCssSelector',
                clickable: @sliderSettings.PaginationClickableEnabled.ToString().ToLower(),
                dynamicBullets: @sliderSettings.DynamicBulletsEnabled.ToString().ToLower()
            },
            </text>
        }

        @if(sliderSettings.NavigationEnabled)
        {
            <text>
            // Navigation arrows
            navigation: {
                nextEl: '@sliderSettings.NavigationNextCssSelector',
                prevEl: '@sliderSettings.NavigationPrevCssSelector',
            },
            </text>
        }


        @if(sliderSettings.ScrollBarEnabled)
        {
            <text>
            // And if we need scrollbar
            scrollbar: {
                el: '@sliderSettings.ScrollBarCssSelector',
            },
            </text>
        }

        @if(sliderSettings.AutoPlayEnabled)
        {
            <text>
                autoplay: {
                    delay: @sliderSettings.AutoPlayDelay,
                    disableOnInteraction: @sliderSettings.AutoPlayDisableOnInteraction.ToString().ToLower()
                },
            </text>
        }

        @if(!string.IsNullOrEmpty(sliderSettings.SlidesPerView))
        {
            if(Int32.TryParse(sliderSettings.SlidesPerView, out var slidePerView))
            {
                var spw = slidePerView;
                <text>
                    slidesPerView: @spw,
                    slidesPerGroup: @sliderSettings.SlidesPerGroup,
                </text>
            }
            else
            {
                <text>
                    slidesPerView: 'auto',
                </text>
            }

        }

        @if(sliderSettings.SpaceBetween > 0)
        {
            <text>
                spaceBetween: @sliderSettings.SpaceBetween,
            </text>
        }


    })
    </script>
}